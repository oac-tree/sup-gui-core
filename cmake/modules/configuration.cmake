# -----------------------------------------------------------------------------
# Modules
# -----------------------------------------------------------------------------

include(CTest)
include(CodeTools)
include(GNUInstallDirs)

# -----------------------------------------------------------------------------
# CODAC environment
# -----------------------------------------------------------------------------

if(NOT COA_NO_CODAC)
  # cmake warns for the existance of ``<PackageName>_ROOT`` (CODAC_ROOT in this case) variables and ignores them
  # for compatibility reasons, we set the related policy to NEW behaviour to suppress warnings and enable desired behaviour
  cmake_policy(SET CMP0074 NEW)
  find_package(CODAC OPTIONAL_COMPONENTS site-packages Python MODULE)
endif()
if (CODAC_FOUND)
  # Append CODAC_CMAKE_PREFIXES to cmake seard directories, this helps cmake find packages installed in the CODAC enviorenment 
  list(APPEND CMAKE_PREFIX_PATH ${CODAC_CMAKE_PREFIXES})

  # If CODAC module provides python executable, override Python3_EXECUTABLE with it
  if(CODAC_Python_FOUND AND NOT Python3_EXECUTABLE)
    set(Python3_EXECUTABLE ${CODAC_PYTHON_EXECUTABLE})
  endif()

  # When operating inside a CODAC CICD system build the documentation
  if (CODAC_CICD)
    set(COA_BUILD_DOCUMENTATION ON)
  endif()
else()
  message(STATUS "Compiling without CODAC")
endif()

# -----------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------

if(COVERAGE)
  # On coverage builds  alsways skip building docs and build tests
  set(COA_BUILD_DOCUMENTATION OFF)
endif()

get_filename_component(SUP_GUI_CORE_PROJECT_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

set(SUP_GUI_CORE_SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
set(SUP_GUI_CORE_BUILDVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})

# -----------------------------------------------------------------------------
# Directories
# -----------------------------------------------------------------------------

if (NOT DEFINED TEST_OUTPUT_DIRECTORY)
  set(TEST_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/test_bin)
endif()

file(MAKE_DIRECTORY ${TEST_OUTPUT_DIRECTORY})

# directory for autogenerated configs
set(SUP_GUI_CORE_AUTOGEN_DIR ${CMAKE_BINARY_DIR}/autogen/sup-gui-core)
file(MAKE_DIRECTORY ${SUP_GUI_CORE_AUTOGEN_DIR})

# -----------------------------------------------------------------------------
# Dependencies
# -----------------------------------------------------------------------------

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

if (COA_USE_QT6)
  find_package(QT NAMES Qt6 REQUIRED COMPONENTS Widgets Core Gui PrintSupport Test)
else()
  find_package(QT NAMES Qt5 REQUIRED COMPONENTS Widgets Core Gui PrintSupport Test)
endif()

find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Core Gui PrintSupport Test)
message(STATUS "Qt${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} found")
message(STATUS " Includes: ${Qt${QT_VERSION_MAJOR}Widgets_INCLUDE_DIRS}")
get_target_property(QtWidgets_location Qt${QT_VERSION_MAJOR}::Core LOCATION_Release)
message(STATUS " Core library: ${QtWidgets_location}")

find_package(Threads)

find_package(sup-mvvm REQUIRED)
find_package(sup-dto REQUIRED)

# -----------------------------------------------------------------------------
# Generating config files
# -----------------------------------------------------------------------------

configure_file(${SUP_GUI_CORE_PROJECT_DIR}/cmake/configs/testconfig.h.in ${SUP_GUI_CORE_AUTOGEN_DIR}/testconfig.h @ONLY)
configure_file(${SUP_GUI_CORE_PROJECT_DIR}/cmake/configs/version_constants.h.in ${SUP_GUI_CORE_AUTOGEN_DIR}/version_constants.h @ONLY)

