# Project main configuration

include(COACommonConfig)
include(COASetupCodacEnvironment)
include(COASetupQt)
include(CodeTools)
include(GenerateExportHeader)

# -----------------------------------------------------------------------------
# Directories
# -----------------------------------------------------------------------------

# directory for tests that produce output
set(SUP_GUI_CORE_TESTRESULT_DIR ${CMAKE_CURRENT_BINARY_DIR}/test_result)
file(MAKE_DIRECTORY ${SUP_GUI_CORE_TESTRESULT_DIR})

# directory for autogenerated configs
set(SUP_GUI_CORE_AUTOGEN_DIR ${CMAKE_CURRENT_BINARY_DIR}/autogen/sup-gui-core)
file(MAKE_DIRECTORY ${SUP_GUI_CORE_AUTOGEN_DIR})

# runtime directory to build application
set(SUP_GUI_CORE_APP_RUNTIME_DIR ${CMAKE_CURRENT_BINARY_DIR}/bin)
file(MAKE_DIRECTORY ${SUP_GUI_CORE_APP_RUNTIME_DIR})

# -----------------------------------------------------------------------------
# Dependencies
# -----------------------------------------------------------------------------
include(FetchGithubDeps)
find_package(Threads)
find_package(sup-mvvm REQUIRED)
find_package(sup-gui-extra REQUIRED)
find_package(sup-dto REQUIRED)

# -----------------------------------------------------------------------------
# Generating config files
# -----------------------------------------------------------------------------
get_filename_component(SUP_GUI_CORE_PROJECT_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)
configure_file(${SUP_GUI_CORE_PROJECT_DIR}/cmake/configs/testconfig.h.in ${SUP_GUI_CORE_AUTOGEN_DIR}/testconfig.h @ONLY)
configure_file(${SUP_GUI_CORE_PROJECT_DIR}/cmake/configs/version_constants.h.in ${SUP_GUI_CORE_AUTOGEN_DIR}/version_constants.h @ONLY)

# -----------------------------------------------------------------------------
# Compiler options
# -----------------------------------------------------------------------------
if (COA_COVERAGE)
  message(STATUS "Enabling test coverage information")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -fno-inline --coverage")
endif()
